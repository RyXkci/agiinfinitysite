---
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&display=swap"
      rel="stylesheet"
    />
    <title>Astro</title>
    <style>
      /*  SVG STUFF */

      #scroller {
        position: fixed;
        height: 100vh;
        inset: 0;
        z-index: 9999;
        mix-blend-mode: screen;
        pointer-events: none;
      }
      .scroller-inner {
        height: 100%;
        width: 100%;
        display: grid;
        place-items: center;
      }

      .line {
        opacity: 0;
      }
      /* #svg-container.svg-center {
        display: grid;
        place-items: center;
      } */

      /* .dot {
        fill: #00d4ff;
        filter: drop-shadow(0 0 3px rgba(0, 188, 212, 0.5));
      }
      #circleGroup {
        transform-origin: center;
      } */

      .hero-one {
        height: 100%;
        width: 100%;
        display: grid;
        place-items: center;
        position: relative;
      }

      /* .hero-one::before {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        margin-inline: auto;
        width: fit-content;
        width: 300px;
        height: 300px;
        background: var(--hero-pseudo-before-bg);
        filter: blur(100px);
        z-index: 2;

        border-radius: 50%;
        transform: scale(var(--hero-pseudo-before-scale));
      } */

      /* .hero-one::after {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        margin-inline: auto;
        width: fit-content;
        height: 100%;
        border-radius: 50%;
        border: 1px solid red;
        width: var(--hero-pseudo-after-width);
        background: var(--hero-pseudo-after-bg);
        background-color: rgba(255, 215, 0, 0.5);
        transform: rotate(var(--hero-pseudo-after-rotate))
          scale(var(--hero-pseudo-after-scale));

        transform-origin: center;
        filter: blur(10px);
        mix-blend-mode: screen;
      } */

      @media screen and (min-width: 600px) {
        .hero-one {
          height: 70%;
          width: 80%;
          display: grid;
          grid-template-columns: 1fr 500px 1fr;
          grid-template-rows: 33% 1fr 1fr;
        }
      }
      .hero {
        position: sticky;
        top: 0;
        height: 100vh;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        /* background: #c2f9ff;
        background: radial-gradient(
          circle,
          rgba(194, 249, 255, 1) 2%,
          rgba(0, 212, 255, 1) 10%,
          rgba(26, 26, 46, 1) 32%
        ); */
        background: black;
        /* background-image: url('../images/hero-bg-1.jpg');
       background-position: center;
       background-size: contain; */
      }

      .hero-title {
        font-family: "Plus Jakarta Sans", sans-serif;
        font-optical-sizing: auto;
        font-size: 3rem;
        grid-column: 1/1;
        grid-row: 1;
        width: 100%; /*pushing it to side of grid column */
        opacity: 0;
      }
      .hero-subtitle {
        font-family: "JetBrains Mono", monospace;
        font-size: 1.75rem;
        grid-column: 1/1;
        grid-row: 2;
        width: 100%; /*pushing it to side of grid column */
        opacity: 0;
      }
      .hero-subtitle span {
        display: block;
      }

      .hero-descr {
        font-size: 1.75rem;
        grid-column: 1/1;
        grid-row: 2;
        width: 100%;
        opacity: 0;
      }

      .hero-descr span {
        color: #00ffff;
      }

      .hero-statement {
        font-family: "JetBrains Mono", monospace;
        font-optical-sizing: auto;
        font-size: 3rem;
        color: #ffd700;
        grid-column: 1/3;
        grid-row: 3;
        width: 100%; /*pushing it to side of grid column */
        opacity: 0;
      }

      .scroller-rotate-trigger {
        position: sticky;
        top: 0;
        height: 100vh;
        /* background: red; */
        /* border: 5px solid red; */
      }
      .wave-img-trigger {
        position: sticky;
        top: 0;
        height: 50px;
        border: 5px solid blue;
        /* background: blue; */
      }
      .hero2-trigger {
        position: sticky;
        top: 0;
        height: 100vh;
        /* border: 5px solid blue; */
        /* background: blue; */
      }
    </style>
  </head>
  <body>
    <div class="hero">
      <div class="hero-one">
        <h1 class="hero-title fade-from-above">NANNI-O</h1>
        <p class="hero-subtitle fade-from-above">
          <span>Nano</span>
          <span>Artificial</span>
          <span>Neural</span>
          <span>Network</span>
          <span>Optical</span>
        </p>
        <p class="hero-descr">
          Volumetric Holographic Nano <span>Optical</span> conductors and <span
            >transistors</span
          >
        </p>
        <p class="hero-statement">From wires to waves</p>
      </div>
    </div>
    <div class="scroller-rotate-trigger"></div>
    <div class="wave-img-trigger"></div>
    <div class="hero2-trigger"></div>
    <div id="scroller" class="scroller-center">
      <div class="scroller-inner">
        <svg
          width="570"
          height="664"
          viewBox="0 0 570 664"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <line
            class="line"
            x1="152.5"
            y1="6.55671e-08"
            x2="152.5"
            y2="74.6517"
            stroke="#FFD700"
            stroke-width="3"></line>
          <line
            class="line"
            y1="-1.5"
            x2="110.153"
            y2="-1.5"
            transform="matrix(0.762573 0.646902 -0.762573 0.646902 152 74.6519)"
            stroke="#FFD700"
            stroke-width="3"></line>
          <ellipse
            class="dot"
            cx="230.5"
            cy="140.396"
            rx="12.5"
            ry="10.6039"
            fill="#FFD700"></ellipse>
          <line
            class="line"
            x1="1.50024"
            y1="663.973"
            x2="3.50024"
            y2="551.973"
            stroke="#FFD700"
            stroke-width="3"></line>
          <line
            class="line"
            x1="3.79866"
            y1="551.187"
            x2="60.6852"
            y2="475.102"
            stroke="#FFD700"
            stroke-width="3"></line>
          <ellipse
            class="dot"
            cx="60.5"
            cy="479.604"
            rx="12.5"
            ry="10.6039"
            fill="#FFD700"></ellipse>
          <line
            class="line"
            x1="521.5"
            y1="663.973"
            x2="523.5"
            y2="551.973"
            stroke="#FFD700"
            stroke-width="3"></line>
          <line
            class="line"
            x1="523.795"
            y1="552.412"
            x2="487.614"
            y2="464.571"
            stroke="#FFD700"
            stroke-width="3"></line>
          <ellipse
            class="dot"
            cx="488.5"
            cy="465.604"
            rx="12.5"
            ry="10.6039"
            fill="#FFD700"></ellipse>
          <line
            class="line"
            x1="568.5"
            y1="-3"
            x2="568.5"
            y2="201"
            stroke="#FFD700"
            stroke-width="3"></line>
          <line
            class="line"
            x1="567.954"
            y1="202.157"
            x2="453.954"
            y2="296.157"
            stroke="#FFD700"
            stroke-width="3"></line>
          <ellipse
            class="dot"
            cx="458.5"
            cy="294.604"
            rx="12.5"
            ry="10.6039"
            fill="#FFD700"></ellipse>
        </svg>
        <div class="hero-chip-img-container"></div>
        <div class="hero-wave-img-container"></div>
      </div>
    </div>

    <!-- <script>
      import {
        animate,
        svg,
        eases,
        createTimeline,
        createTimer,
        utils,
        text,
        stagger,
        onScroll,
      } from "animejs";

      // SOME SETUP //

      const conicHerobgYellow =
        "conic-gradient(from 0deg, transparent 0 22%, rgba(255, 215, 0, .2) 22% 27%, transparent 27% 49%, rgba(255, 215, 0, .2) 49% 53%, transparent 53% 78%, rgba(255, 215, 0, .2) 78% 82%, transparent 82% 100%)";
      const conicHerobgBlue =
        "conic-gradient(from 0deg, transparent 0 22%, rgba(0, 255, 255, .2) 22% 27%, transparent 27% 49%, rgba(0, 255, 255, .2) 49% 53%, transparent 53% 78%, rgba(0, 255, 255, .2) 78% 82%, transparent 82% 100%)";
      const radialHerobgYellow =
        "radial-gradient(circle 400px, #ffd700eb, #000814)";
      const radialHerobgBlue =
        "radial-gradient(circle 400px, #00FFFFe, #000814)";

      text.split(".hero-one", {
        chars: { class: "fade-from-above" },
      });

      //    END SETUP //

      animate(svg.createDrawable(".line"), {
        opacity: [0, 1],
        draw: ["0 0", "0 1"],
        // ease: "inOutQuad",
        duration: 2000,
        delay: stagger(100),
        // loop: true,
      });

      const heroImgtl = animate(".hero-chip-img-container", {
        scale: {
          from: "0",
          duration: 2000,
        },
        opacity: {
          to: "1",
          duration: 3000,
        },
        rotate: {
          to: "1turn",
          duration: 2000,
        },
      });

      const introLineAnimation = animate(".hero-one", {
        "--hero-pseudo-after-scale": {
          to: ".5",
          duration: 500,
        },
      });

      const heroTl = createTimeline()
        .sync(introLineAnimation)
        .add(".hero-one", {
          "--hero-pseudo-after-width": {
            to: "700px",
          },
          "--hero-pseudo-after-bg": {
            to: conicHerobgYellow,
          },
          "--hero-pseudo-after-scale": {
            to: "1",
          },
          "--hero-pseudo-before-scale": {
            to: "1",
          },
        });

      const heroTextAnim1 = animate(".fade-from-above", {
        opacity: [0, 1],
        y: [{ to: ["-100%", "0%"] }],
        duration: 750,
        ease: "out(3)",
        delay: stagger(50),
        loop: false,
      });

      const heroTlMain = createTimeline()
        // .sync(heroTl)
        .sync(heroImgtl, "-=1000")
        .sync(heroTextAnim1, "-=1000");

      const chipFadeOutAnimation = animate(".hero-chip-img-container", {
        rotateY: {
          to: "5turn",
          duration: 10000,
        },
        opacity: {
          to: [1, 0],
          // duration: 5000,
        },
        autoplay: onScroll({
          container: ".svg-container",
          target: ".wave-img-trigger",
          enter: "bottom +=100",
          leave: "+=100 top",

          debug: true,
        }),
      });

      const waveImgAnimation = animate(".hero-wave-img-container", {
        opacity: [0, 1],
        rotateY: {
          to: "5turn",
          // duration: 5000,
        },
        autoplay: onScroll({
          container: ".svg-container",
          target: ".wave-img-trigger",
          enter: "bottom top",
          leave: "bottom top",

          debug: true,
        }),
      });

      const scrolltl2 = createTimeline({
        autoplay: onScroll({
          container: ".svg-container",
          target: ".hero2-trigger",
          enter: "bottom +=100",
          leave: "+=100 top",
          sync: true,
          // debug: true,
        }),
        // defaults: { duration: 3000 },
      })
        // .add(".hero-one", {
        //   "--hero-pseudo-before-bg": {
        //     to: radialHerobgBlue,
        //   },
        //   "--hero-pseudo-after-width": {
        //     to: "700px",
        //   },
        //   "--hero-pseudo-after-bg": {
        //     to: conicHerobgBlue,
        //   },
        //   "--hero-pseudo-after-scale": {
        //     to: "1",
        //   },
        //   "--hero-pseudo-before-scale": {
        //     to: "1",
        //   },
        // })
        .add(".hero-wave-img-container", {
          x: "15rem",
          y: "5rem",
          duration: 5000,
          // delay: 7000,
          ease: "linear",
        })
        .add(".hero-descr", {
          opacity: [0, 1],
          y: [{ to: ["-100%", "0%"] }],
          duration: 5000,
          ease: "linear",
          delay: stagger(50),
          loop: false,
        })
        .add(".hero-statement", {
          opacity: [0, 1],
          y: [{ to: ["-100%", "0%"] }],
          duration: 5000,
          ease: "linear",
          delay: stagger(50),
          loop: false,
        });

      const scrolltl1 = createTimeline({
        autoplay: onScroll({
          // container: "#svg-container",
          target: ".svg-rotate-trigger",
          enter: "bottom top",
          leave: "+=100 top",
          sync: true,
          // debug: true,
        }),
        defaults: { duration: 5000 },
      })
        .add(".dot", {
          opacity: [1, 0],
        })
        .add(".line", {
          opacity: [1, 0],
        })
        .add(".hero-one", {
          "--hero-pseudo-after-scale": {
            to: "0",
            duration: 3000,
          },
          "--hero-pseudo-before-scale": {
            to: "0",
          },
        })
        .add(".hero-title", {
          y: "50px",
          opacity: [1, 0],
        })
        .add(".hero-subtitle", {
          y: "15rem",
          scale: {
            to: "0",
            delay: 500,
          },
          opacity: [1, 0],
        })
        .add(".hero-chip-img-container", {
          scale: [1, 1.5],
        });

      const scrollTlMain = createTimeline({ autoplay: false }).sync(scrolltl1);
      // .sync(scrolltl2);

      //     utils.set(".hero-one", {
      //   "--hero-pseudo-before-scale": "0",
      //   "--hero-pseudo-before-bg": radialHerobgYellow,
      //   "--hero-pseudo-after-rotate": "0deg",
      //   "--hero-pseudo-after-scale": "0",
      //   "--hero-pseudo-after-bg": "rgba(255, 215, 0, 0.5)",
      //   "--hero-pseudo-after-width": "5px",
      // });

      //        .add("#circleGroup", {
      //   ease: "linear",
      //   scale: "0",
      // })

      // .add(".hero-one", {
      //   "--hero-pseudo-after-scale": {
      //     to: "0",
      //     duration: 3000,
      //   },
      //   "--hero-pseudo-before-scale": {
      //     to: "0",
      //   },
      // })

      //   const heroBgAnimation = animate(".hero-one", {
      //   "--hero-pseudo-after-width": {
      //     to: "700px",
      //     delay: 1000
      //   },
      //   "--hero-pseudo-after-bg": {
      //     to: conicHerobg,
      //     delay: 1000
      //   },
      //   "--hero-pseudo-after-rotate": {
      //     to: "1turn",
      //     duration: 5000,
      //     delay: 1000
      //   },
      //   "--hero-pseudo-before-scale": {
      //     to: "1",
      //     delay: 5000
      //   },
      // });

      // const introImgAnimation = animate(".hero-chip-img-container", {
      //   scale: {
      //     from: "0",
      //     // duration: 3000,
      //   },
      //   rotate: {
      //     to: "1turn",
      //     // duration: 3000,
      //   },
      //   // delay: 500,
      // });

      // const heroIntrotl1 = createTimeline()
      // .sync(introImgAnimation, "+=500")
      // .sync(heroBgAnimation);

      // const heroConicRotate = createTimeline({ defaults: { delay: 1000 } }).add(
      //   ".hero-one",
      //   {
      //     "--hero-pseudo-after-rotate": {
      //       to: "1turn",
      //       duration: 5000,
      //     },
      //     loop: true,
      //     loopDelay: 0,
      //   }
      // );

      // const tlMain = createTimeline().sync(tl).sync(scrolltl1);

      // .add(".hero-chip-img-container", {
      //   scale: {
      //     from: "0",
      //   },
      //   rotate: {
      //     to: "360deg",
      //   },
      //   opacity: {
      //     to: "1",
      //   },
      //   delay: 500
      // });

      // const heroIntrotl2 = createTimeline().add(".hero-one", {
      //   // "--hero-pseudo-after-scale": {
      //   //   to: "1",
      //   // },
      //   "--hero-pseudo-after-rotate": {
      //     to: "1turn",
      //     duration: 20000,
      //     ease: "linear",
      //   },
      // });

      // const heroIntroMaintl = createTimeline()
      //   .sync(heroIntrotl1)
      //   .sync(heroIntrotl2, "+=1000");

      // const herointrotl2 = createTimeline({ defaults: { delay: 1000 } }).add(
      //   ".hero-one",
      //   {
      //     "--hero-pseudo-after-scale": {
      //       to: "1",
      //     },
      //     "--hero-pseudo-after-rotate": {
      //       to: "1turn",
      //       duration: 20000,
      //       ease: "linear",
      //     },
      //   }
      // );

      // const herotlMain = createTimeline().sync(herointrotl1).sync(herointrotl2);

      // .add(".circle-group", {
      //   opacity: 1,
      //   delay: stagger(500, { reversed: true }),
      //   duration: stagger(500, { start: 500 }),
      // })
      // .add('.hero-one::before', {
      //   scale: {
      //     from: '0',
      //     duration: 3000
      //   }
      // })
      // .add(
      //   ".hero-chip-img-container",
      //   {
      //     scale: {
      //       from: "0",
      //       duration: 3000,
      //     },
      //     rotate: {
      //       to: "360deg",
      //       duration: 5000,
      //     },
      //   },
      //   2000
      // );

      // .add(".circle-group", {
      //   rotate: "1turn",
      //   ease: "linear",
      //   autoplay: onScroll({
      //     container: ".svg-container",
      //     target: ".svg-rotate-trigger",
      //     enter: "bottom top",
      //     leave: "+=100 top",
      //     sync: true,
      //     debug: true,
      //   }),
      // });

      //  <svg
      //   width="716"
      //   height="584"
      //   viewBox="0 0 716 584"
      //   fill="none"
      //   xmlns="http://www.w3.org/2000/svg"
      // >
      //   <g id="circleGroup">
      //     <path
      //       class="circle"
      //       id="circle-3"
      //       d="M349 116.5C455.548 116.5 541.5 194.849 541.5 291C541.5 387.151 455.548 465.5 349 465.5C242.452 465.5 156.5 387.151 156.5 291C156.5 194.849 242.452 116.5 349 116.5Z"
      //       stroke="url(#paint0_linear_73_119)"
      //       stroke-opacity="0.27"
      //       stroke-width="3"></path>
      //     <path
      //       class="circle"
      //       id="circle-2"
      //       d="M348.5 66.5C489.627 66.5 603.5 167.737 603.5 292C603.5 416.263 489.627 517.5 348.5 517.5C207.373 517.5 93.5 416.263 93.5 292C93.5 167.737 207.373 66.5 348.5 66.5Z"
      //       stroke="url(#paint1_linear_73_119)"
      //       stroke-width="2"></path>
      //     <path
      //       class="circle"
      //       id="circle-1"
      //       d="M358 2.5C554.838 2.5 713.5 132.566 713.5 292C713.5 451.434 554.838 581.5 358 581.5C161.162 581.5 2.5 451.434 2.5 292C2.5 132.566 161.162 2.5 358 2.5Z"
      //       stroke="url(#paint2_linear_73_119)"
      //       stroke-width="1"></path>
      //   </g>
      //   <defs>
      //     <linearGradient
      //       id="paint0_linear_73_119"
      //       x1="349"
      //       y1="114"
      //       x2="349"
      //       y2="468"
      //       gradientUnits="userSpaceOnUse"
      //     >
      //       <stop stop-color="#FFD700"></stop>
      //       <stop offset="1" stop-color="#998100" stop-opacity="0.49"></stop>
      //     </linearGradient>
      //     <linearGradient
      //       id="paint1_linear_73_119"
      //       x1="348.5"
      //       y1="64"
      //       x2="348.5"
      //       y2="520"
      //       gradientUnits="userSpaceOnUse"
      //     >
      //       <stop stop-color="#FFD700"></stop>
      //       <stop offset="1" stop-color="#998100" stop-opacity="0.13"></stop>
      //     </linearGradient>
      //     <linearGradient
      //       id="paint2_linear_73_119"
      //       x1="358"
      //       y1="0"
      //       x2="358"
      //       y2="584"
      //       gradientUnits="userSpaceOnUse"
      //     >
      //       <stop stop-color="#FFD700"></stop>
      //       <stop offset="0.480769" stop-color="#998100" stop-opacity="0.17"
      //       ></stop>
      //     </linearGradient>
      //   </defs>
      // </svg>
    </script>
  </body>
</html> -->
